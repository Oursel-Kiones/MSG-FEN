utils
1. calculate_weights.py：
    功能： 计算类别权重，用于处理类别不平衡问题。
    用途： 在语义分割任务中，某些类别的像素数量可能远多于其他类别。 这会导致模型在训练过程中偏向于数量较多的类别，从而降低对数量较少类别的分割精度。 为了解决这个问题，可以为每个类别分配一个权重，使得模型更加关注数量较少的类别。
    常见方法：
        Inverse Class Frequency (ICF): 权重与类别频率成反比。 类别出现频率越高，权重越小。
        Median Frequency Balancing (MFB): 权重与类别频率的中位数和该类别频率的比值有关。
    是否需要替换：
        取决于你的数据集是否需要类别权重。 如果你的数据集存在类别不平衡问题，则需要使用此类脚本来计算类别权重。
        取决于现有脚本是否满足你的需求。 如果现有的脚本已经实现了你需要的权重计算方法，并且能够与你的代码集成，则无需替换。
2. loss.py：
    功能： 定义损失函数，用于衡量模型的预测结果与真实标签之间的差异。
    用途： 损失函数是模型训练的关键组成部分。 它告诉模型如何调整参数以最小化预测误差。
    常见损失函数：
        Cross-Entropy Loss: 用于多类别分类问题。
        Dice Loss: 用于医学图像分割，尤其在目标区域很小的时候效果更好。
        Focal Loss: 用于解决类别不平衡问题，可以动态调整 loss 的权重，使得模型更加关注难分类的样本。
        IoU Loss: 直接优化 Intersection over Union (IoU) 指标。
    是否需要替换：
        取决于你的任务和模型的需求。 如果你想要使用不同的损失函数，或者需要自定义损失函数，则需要修改或替换此文件。
        取决于现有脚本是否满足你的需求。 如果现有的脚本已经实现了你需要的损失函数，并且能够与你的代码集成，则无需替换。
3. lr_scheduler.py：
    功能： 定义学习率调度器，用于在训练过程中动态调整学习率。
    用途： 学习率是模型训练中的一个重要参数。 适当的学习率可以加速模型收敛，并提高模型性能。 学习率调度器可以根据训练进度或验证集性能动态调整学习率，以获得更好的训练效果。
    常见的学习率调度器：
        StepLR: 每隔一定 epoch 降低学习率。
        MultiStepLR: 在指定的 epoch 降低学习率。
        ExponentialLR: 以指数方式降低学习率。
        CosineAnnealingLR: 使用余弦函数来调整学习率。
    是否需要替换：
        取决于你是否需要动态调整学习率。 动态调整学习率通常可以提高模型性能。
        取决于现有脚本是否满足你的需求。 如果现有的脚本已经实现了你需要的学习率调度策略，并且能够与你的代码集成，则无需替换。
4. metrics.py：
    功能： 定义用于评估模型性能的指标。
    用途： 指标用于衡量模型的预测结果与真实标签之间的相似程度。
    常见的指标：
        Pixel Accuracy: 像素精度。
        Mean Accuracy: 平均精度。
        Mean IoU (Intersection over Union): 平均交并比，语义分割任务中最常用的指标之一。
        Frequency Weighted IoU: 频率加权 IoU。
        Dice Coefficient: Dice 系数。
    是否需要替换：
        取决于你的任务和评估标准。 如果你想要使用不同的指标，或者需要自定义指标，则需要修改或替换此文件。
        取决于现有脚本是否满足你的需求。 如果现有的脚本已经实现了你需要的指标，并且能够与你的代码集成，则无需替换。
5. saver.py：
    功能： 定义用于保存和加载模型参数的函数。
    用途： 在训练过程中，需要定期保存模型的参数，以便在训练中断后恢复训练，或者在测试阶段加载训练好的模型。
    常见操作：
        保存模型参数： 将模型的 state_dict 保存到磁盘上。
        加载模型参数： 从磁盘上加载模型的 state_dict。
    是否需要替换：
        取决于你是否需要自定义模型保存和加载的方式。
        通常情况下，不需要修改此文件。 PyTorch 提供了标准的模型保存和加载方法，可以满足大多数需求。
6. summaries.py：
    功能： 定义用于记录训练过程中的信息的函数，例如损失值、指标、学习率等。
    用途： 记录训练信息可以帮助你监控训练过程，并进行可视化分析。
    常见方法：
        使用 TensorBoard 记录信息： TensorBoard 是一个用于可视化 TensorFlow 训练过程的工具。
        使用其他日志库记录信息： 例如 logging 模块。
    是否需要替换：
        取决于你是否需要记录训练信息，以及你想要使用哪种日志工具。
        通常情况下，不需要修改此文件。 你可以使用现有的日志工具，或者根据你的需求进行简单的修改。